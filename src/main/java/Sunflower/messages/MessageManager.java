package Sunflower.messages;

import Sunflower.MainPlugin;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Map;
import java.util.logging.Logger;

public class MessageManager {

    private final MainPlugin plugin;
    private FileConfiguration messagesConfig;
    private final File messagesFile;
    private final Logger logger;

    public MessageManager(MainPlugin plugin, File dataFolder, Logger logger) {
        this.plugin = plugin;
        this.messagesFile = new File(dataFolder, "messages.yml");
        this.logger = logger;
        validateFile();
        reload();
    }

    /**
     * Ki·ªÉm tra file messages.yml c√≥ h·ª£p l·ªá kh√¥ng, n·∫øu kh√¥ng s·∫Ω ƒë·ªïi t√™n v√† t·∫°o m·ªõi
     */
    private void validateFile() {
        if (!messagesFile.exists()) {
            logger.warning("messages.yml kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi...");
            createNewFile();
            return;
        }

        try {
            FileConfiguration config = YamlConfiguration.loadConfiguration(messagesFile);
            if (config.getKeys(false).isEmpty()) {
                throw new IOException("File tr·ªëng ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!");
            }
            logger.info("messages.yml h·ª£p l·ªá.");
        } catch (Exception e) {
            logger.severe("L·ªói trong messages.yml: " + e.getMessage());
            backupAndCreateNewFile();
        }
    }

    private void backupAndCreateNewFile() {
        File backupFile = new File(messagesFile.getParent(), "messages.yml.backup");

        try {
            Files.move(messagesFile.toPath(), backupFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            logger.warning("messages.yml b·ªã l·ªói, ƒë√£ ƒë·ªïi t√™n th√†nh: " + backupFile.getName());
        } catch (IOException e) {
            logger.severe("Kh√¥ng th·ªÉ ƒë·ªïi t√™n file l·ªói: " + e.getMessage());
        }

        createNewFile();
    }

    private void createNewFile() {
        messagesConfig = YamlConfiguration.loadConfiguration(messagesFile);

        // N·ªôi dung m·∫∑c ƒë·ªãnh c·ªßa messages.yml
        messagesConfig.set("reload_success", "&aƒê√£ reload th√†nh c√¥ng!");
        messagesConfig.set("reload_missing_args", "&cThi·∫øu tham s·ªë! Vui l√≤ng nh·∫≠p l·∫°i.");
        messagesConfig.set("config_invalid", "&cL·ªói trong file c·∫•u h√¨nh! ƒê√£ t·∫°o file m·ªõi.");
        messagesConfig.set("config_fixed", "&aFile c·∫•u h√¨nh h·ª£p l·ªá.");

        save();
        logger.info("T·∫°o file m·ªõi: messages.yml v·ªõi n·ªôi dung m·∫∑c ƒë·ªãnh.");
    }

    public void reload() {
        File messagesFile = new File(plugin.getDataFolder(), "messages.yml");

        if (!messagesFile.exists()) {
            plugin.saveResource("messages.yml", false);
            logger.info("‚úÖ File messages.yml ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!");
        }

        messagesConfig = YamlConfiguration.loadConfiguration(messagesFile);
        logger.info("üîÑ messages.yml ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i.");
    }

    public String get(String key) {
        return get(key, null);
    }

    public String get(String key, Map<String, String> placeholders) {
        if (key == null) {
            logger.severe("‚ùå G·ªçi messageManager.get() v·ªõi key = null! Ki·ªÉm tra l·∫°i m√£ ngu·ªìn.");
            return "‚ö†Ô∏è [L·ªói] Key kh√¥ng h·ª£p l·ªá!";
        }

        String message = messagesConfig.getString(key);

        if (message == null) {
            logger.warning("‚ö†Ô∏è Thi·∫øu key trong messages.yml: " + key + ". T·ª± ƒë·ªông t·∫£i l·∫°i file...");
            reload();
            message = messagesConfig.getString(key, "‚ö†Ô∏è [L·ªói] Kh√¥ng t√¨m th·∫•y tin nh·∫Øn!");

            if (message.equals("‚ö†Ô∏è [L·ªói] Kh√¥ng t√¨m th·∫•y tin nh·∫Øn!")) {
                logger.severe("‚ùå Key '" + key + "' v·∫´n b·ªã thi·∫øu sau khi reload!");
            }
        }

        // üìå Ki·ªÉm tra n·∫øu placeholders b·ªã null ƒë·ªÉ tr√°nh l·ªói NullPointerException
        if (placeholders != null) {
            for (Map.Entry<String, String> entry : placeholders.entrySet()) {
                message = message.replace("%" + entry.getKey() + "%", entry.getValue());
            }
        }

        return message;
    }

    public void save() {
        try {
            messagesConfig.save(messagesFile);
        } catch (IOException e) {
            logger.severe("L·ªói khi l∆∞u messages.yml: " + e.getMessage());
        }
    }
}
