package com.sunflowerplugin.flyfood.commands;

import com.sunflowerplugin.flyfood.Config;
import com.sunflowerplugin.flyfood.MainPlugin;
import net.md_5.bungee.api.ChatMessageType;
import net.md_5.bungee.api.chat.TextComponent;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.Map;

public class FlyCommand implements CommandExecutor {

    private final MainPlugin plugin;

    // L∆∞u th·ªùi gian bay c·ªßa ng∆∞·ªùi ch∆°i
    private final Map<Player, Long> flyStartTimes = new HashMap<>();
    private final Map<Player, Boolean> countdownActive = new HashMap<>();
    private final Map<Player, Boolean> flyEnabled = new HashMap<>();  // L∆∞u tr·∫°ng th√°i b·∫≠t c·ªßa /fly

    public FlyCommand(MainPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("‚ùå Only players can use this command!");
            return false;
        }

        Player player = (Player) sender;

        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi ch∆°i
        String permission = "sunflower.fly";  // Quy·ªÅn m·∫∑c ƒë·ªãnh
        if (player.hasPermission("sunflower.fly.vip1")) {
            permission = "sunflower.fly.vip1";  // N·∫øu ng∆∞·ªùi ch∆°i c√≥ quy·ªÅn VIP
        }

        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh
        if (!player.hasPermission(permission)) {
            player.sendMessage("‚ùå You do not have the required permission to use this command.");
            return false;
        }

        // L·∫•y countdown v√† th·ªùi gian s·ª≠ d·ª•ng bay t·ª´ c·∫•u h√¨nh
        Config cfg = plugin.getPluginConfig();
        int flyCountdown = cfg.getFlyCountdown(permission);
        int flyUsageTime = cfg.getFlyUsageTime(permission);

        // N·∫øu kh√¥ng c√≥ quy·ªÅn trong config, g·ª≠i th√¥ng b√°o l·ªói v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (flyCountdown == -1 || flyUsageTime == -1) {
            player.sendMessage("‚ùå Your permissions or configuration are incorrect!");
            return false;
        }

        // Ch·∫∑n ng∆∞·ªùi ch∆°i s·ª≠ d·ª•ng l·∫°i /fly khi ƒëang trong countdown
        if (countdownActive.getOrDefault(player, false)) {
            player.sendMessage("‚è≥ You must wait for the countdown to finish before using /fly again!");
            return false;
        }

        // N·∫øu ng∆∞·ªùi ch∆°i ƒëang bay, t·∫Øt ch·∫ø ƒë·ªô bay v√† b·∫Øt ƒë·∫ßu countdown
        if (player.isFlying()) {
            player.setFlying(false);
            player.setAllowFlight(false);  // V√¥ hi·ªáu h√≥a quy·ªÅn bay
            player.sendMessage("‚úàÔ∏è Fly mode disabled. You must wait " + flyCountdown + "s before flying again.");
            flyStartTimes.remove(player);  // X√≥a th·ªùi gian bay tr∆∞·ªõc ƒë√≥
            flyEnabled.put(player, false);  // ƒê√°nh d·∫•u /fly ƒë√£ b·ªã v√¥ hi·ªáu h√≥a
            countdownActive.put(player, true);  // ƒê√°nh d·∫•u countdown ƒëang ch·∫°y

            // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian countdown (Kh√¥ng hi·ªÉn th·ªã tr√™n Action Bar)
            new BukkitRunnable() {
                int countdownTime = flyCountdown;

                @Override
                public void run() {
                    if (countdownTime > 0) {
                        countdownTime--;
                    } else {
                        // Khi countdown k·∫øt th√∫c, cho ph√©p bay l·∫°i
                        countdownActive.put(player, false);  // B·ªè ch·∫∑n s·ª≠ d·ª•ng l·ªánh
                        player.sendMessage("‚úÖ You can now use /fly again.");
                        cancel();
                    }
                }
            }.runTaskTimer(plugin, 0L, 20L); // ƒê·∫øm ng∆∞·ª£c m·ªói gi√¢y

            return false;
        }

        // N·∫øu /fly ƒë√£ b·∫≠t nh∆∞ng ng∆∞·ªùi ch∆°i kh√¥ng ƒëang bay, kh√¥ng reset th·ªùi gian Action Bar
        if (flyEnabled.getOrDefault(player, false)) {
            player.sendMessage("üöÄ Fly mode is already enabled! Start flying to use your remaining time.");
            return false;
        }

        // B·∫≠t ch·∫ø ƒë·ªô bay
        player.setAllowFlight(true);
        player.setFlying(true);
        flyStartTimes.put(player, System.currentTimeMillis());  // L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu bay
        flyEnabled.put(player, true);  // ƒê√°nh d·∫•u r·∫±ng ch·∫ø ƒë·ªô bay ƒë√£ ƒë∆∞·ª£c b·∫≠t

        player.sendMessage("‚úàÔ∏è Fly mode enabled! You have " + flyUsageTime + " seconds.");

        // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian bay v√† hi·ªÉn th·ªã l√™n Action Bar
        new BukkitRunnable() {
            @Override
            public void run() {
                if (!flyStartTimes.containsKey(player)) {
                    cancel();
                    return;
                }

                long elapsedTime = (System.currentTimeMillis() - flyStartTimes.get(player)) / 1000;  // Th·ªùi gian ƒë√£ bay (gi√¢y)
                int remainingTime = flyUsageTime - (int) elapsedTime;  // Th·ªùi gian c√≤n l·∫°i

                if (remainingTime > 0) {
                    // Hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i tr√™n Action Bar
                    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent("‚è≥ Fly time left: " + remainingTime + "s"));
                } else {
                    // Khi h·∫øt th·ªùi gian, t·∫Øt ch·∫ø ƒë·ªô bay
                    player.setFlying(false);
                    player.setAllowFlight(false);
                    player.sendMessage("‚ùå Your fly time has expired!");
                    flyStartTimes.remove(player);
                    flyEnabled.put(player, false);  // ƒê√°nh d·∫•u ch·∫ø ƒë·ªô bay ƒë√£ b·ªã v√¥ hi·ªáu h√≥a
                    cancel();  // D·ª´ng ƒë·∫øm ng∆∞·ª£c
                }
            }
        }.runTaskTimer(plugin, 0L, 20L);  // C·∫≠p nh·∫≠t m·ªói gi√¢y (20 ticks)

        return true;
    }
}
