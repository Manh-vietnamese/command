package com.sunflowerplugin.flyfood;

import com.sunflowerplugin.flyfood.commands.FlyCommand;
import com.sunflowerplugin.flyfood.commands.FoodCommand;
import com.sunflowerplugin.flyfood.commands.HealCommand;
import com.sunflowerplugin.flyfood.commands.ReloadCommand;
import com.sunflowerplugin.flyfood.config.Config;
import com.sunflowerplugin.flyfood.messages.MessageManager;
import org.bukkit.plugin.java.JavaPlugin;
import java.io.File;
import java.util.Objects;

public class MainPlugin extends JavaPlugin {

    private Config configManager;
    private MessageManager messageManager;

    @Override
    public void onEnable() {
        checkAndCreateConfig();

        this.configManager = new Config(this);
        FoodCommand foodCmd = new FoodCommand(this);
        HealCommand healCmd = new HealCommand(this);
        messageManager = new MessageManager(getDataFolder());

        // üìå ƒêƒÉng k√Ω l·ªánh
        Objects.requireNonNull(getCommand("fly")).setExecutor(new FlyCommand(this));
        Objects.requireNonNull(getCommand("food")).setExecutor(foodCmd);
        Objects.requireNonNull(getCommand("freload")).setExecutor(new ReloadCommand(this, foodCmd));
        Objects.requireNonNull(getCommand("heal")).setExecutor(healCmd);
    }

    public void reloadConfigs() {
        try {
            checkAndCreateConfig(); // üìå Ki·ªÉm tra file khi reload
            configManager.reloadConfig();
            getLogger().info("‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i th√†nh c√¥ng!");
        } catch (Exception e) {
            getLogger().severe("‚ùå L·ªói khi t·∫£i l·∫°i c·∫•u h√¨nh: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // üìå Ki·ªÉm tra v√† t·∫°o l·∫°i file config.yml n·∫øu b·ªã m·∫•t
    private void checkAndCreateConfig() {
        createFile("config.yml", true);
        createFile("messages.yml", false);
    }

    private void createFile(String fileName, boolean isConfig) {
        File file = new File(getDataFolder(), fileName);
        if (!file.exists()) {
            getLogger().warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y " + fileName + "! ƒêang t·∫°o file m·ªõi...");
            if (isConfig) {
                saveDefaultConfig();
                reloadConfig();
            } else {
                saveResource(fileName, false);
            }
            getLogger().info("‚úÖ File " + fileName + " ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!");
        }
    }

    public Config getConfigManager() {
        return configManager;
    }
    public MessageManager getMessageManager() {
        return messageManager;
    }
}
